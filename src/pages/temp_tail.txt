    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleStatusChange = async (newStatus: string) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("Not authenticated");

      // Update candidate status
      const { error: updateError } = await supabase
        .from("candidates")
        .update({
          status: newStatus,
          updated_by: user.id,
          updated_by_email: user.email,
        })
        .eq("id", id);

      if (updateError) throw updateError;

      // Insert status history
      await (supabase as any)
        .from("status_history")
        .insert({
          candidate_id: id,
          from_status: candidate?.status,
          to_status: newStatus,
          changed_by: user.id,
          changed_by_email: user.email,
        });

      toast({
        title: "Success",
        description: `Status updated to ${newStatus}`,
      });

      fetchCandidateData();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  const getStatusActions = () => {
    if (!candidate) return [];

    const canUpdate = permissions.canUpdate("candidates");
    if (!canUpdate) return [];

    const actions: Array<{ label: string; onClick: () => void; variant?: any }> = [];

    switch (candidate.status) {
      case "new":
        actions.push(
          { label: "Shortlist", onClick: () => setShowShortlistDialog(true) },
          { label: "Schedule Interview", onClick: () => setShowScheduleDialog(true) },
          { label: "Put On Hold", onClick: () => handleStatusChange("on_hold") },
          { label: "Reject", onClick: () => handleStatusChange("rejected"), variant: "destructive" }
        );
        break;
      case "shortlisted":
        actions.push(
          { label: "Schedule Interview", onClick: () => setShowScheduleDialog(true) },
          { label: "Put On Hold", onClick: () => handleStatusChange("on_hold") },
          { label: "Reject", onClick: () => handleStatusChange("rejected"), variant: "destructive" }
        );
        break;
      case "interview_scheduled":
        actions.push(
          { label: "Mark as Interviewed", onClick: () => handleStatusChange("interviewed") },
          { label: "Put On Hold", onClick: () => handleStatusChange("on_hold") },
          { label: "Reject", onClick: () => handleStatusChange("rejected"), variant: "destructive" }
        );
        break;
      case "interviewed":
        actions.push(
          { label: "Send Offer", onClick: () => setShowOfferDialog(true) },
          { label: "Put On Hold", onClick: () => handleStatusChange("on_hold") },
          { label: "Reject", onClick: () => handleStatusChange("rejected"), variant: "destructive" }
        );
        break;
      case "offer_sent":
        actions.push(
          { label: "Mark Offer Accepted", onClick: () => handleStatusChange("offer_accepted") },
          { label: "Mark Offer Rejected", onClick: () => handleStatusChange("offer_rejected"), variant: "destructive" }
        );
        break;
      case "offer_accepted":
        actions.push(
          { label: "Mark as Hired", onClick: () => handleStatusChange("hired") }
        );
        break;
      case "on_hold":
        actions.push(
          { label: "Back to Shortlist", onClick: () => handleStatusChange("shortlisted") },
          { label: "Schedule Interview", onClick: () => setShowScheduleDialog(true) },
          { label: "Send Offer", onClick: () => setShowOfferDialog(true) },
          { label: "Reject", onClick: () => handleStatusChange("rejected"), variant: "destructive" }
        );
        break;
    }

    return actions;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!candidate) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Candidate not found</h2>
          <Button onClick={() => navigate("/candidates")}>Back to Candidates</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card">
        <div className="container mx-auto px-6 py-4">
          <img src={logo} alt="TalaadThai" className="h-24 w-auto mb-2" />
        </div>
      </header>

      <div className="container mx-auto px-6 py-8">
        <Button variant="ghost" onClick={() => navigate("/candidates")} className="mb-6">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Candidates
        </Button>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Candidate Profile */}
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Candidate Profile</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-muted-foreground">First Name</p>
                    <p className="font-medium">{candidate.first_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Last Name</p>
                    <p className="font-medium">{candidate.last_name}</p>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <p>{candidate.email}</p>
                </div>

                {candidate.phone_number && (
                  <div className="flex items-center gap-2">
                    <Phone className="h-4 w-4 text-muted-foreground" />
                    <p>{candidate.phone_number}</p>
                  </div>
                )}

                <div className="flex items-center gap-2">
                  <Briefcase className="h-4 w-4 text-muted-foreground" />
                  <p>{candidate.position_applied}</p>
                </div>

                {candidate.education_level && (
                  <div className="flex items-center gap-2">
                    <GraduationCap className="h-4 w-4 text-muted-foreground" />
                    <p>
                      {candidate.education_level} - {candidate.institution}
                    </p>
                  </div>
                )}

                {candidate.years_of_experience && (
                  <div>
                    <p className="text-sm text-muted-foreground">Years of Experience</p>
                    <p className="font-medium">{candidate.years_of_experience}</p>
                  </div>
                )}

                {candidate.current_position && (
                  <div>
                    <p className="text-sm text-muted-foreground">Current Position</p>
                    <p className="font-medium">
                      {candidate.current_position} at {candidate.current_employer}
                    </p>
                  </div>
                )}

                {candidate.message && (
                  <div>
                    <p className="text-sm text-muted-foreground">Message</p>
                    <p className="mt-1">{candidate.message}</p>
                  </div>
                )}

                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <p>Applied on {new Date(candidate.created_at).toLocaleDateString()}</p>
                </div>

                {cvUrl && permissions.canRead("candidates") && (
                  <div className="pt-2 border-t">
                    <a
                      href={cvUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2 text-primary hover:underline"
                    >
                      <FileText className="h-4 w-4" />
                      <span>View CV/Resume</span>
                    </a>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Interviewer Information */}
            <InterviewerInfo candidateId={id!} />

            {/* Interviews */}
            <Card>
              <CardHeader>
                <CardTitle>Interview History</CardTitle>
              </CardHeader>
              <CardContent>
                {interviews.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">No interviews scheduled</p>
                ) : (
                  <div className="space-y-4">
                    {interviews.map((interview) => (
                      <div key={interview.id} className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <p className="font-medium">{interview.interviewer_name}</p>
                          <span
                            className={`px-2 py-1 rounded text-xs ${
                              interview.status === "completed"
                                ? "bg-green-100 text-green-700"
                                : interview.status === "scheduled"
                                  ? "bg-blue-100 text-blue-700"
                                  : "bg-gray-100 text-gray-700"
                            }`}
                          >
                            {interview.status}
                          </span>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {new Date(interview.interview_date).toLocaleDateString()} at {interview.interview_time}
                        </p>
                        {interview.location && <p className="text-sm mt-1">Location: {interview.location}</p>}
                        {interview.notes && <p className="text-sm mt-2 text-muted-foreground">{interview.notes}</p>}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Status Management */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Candidate Status</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-muted-foreground mb-2">Current Status</p>
                    <StatusBadge status={candidate.status} />
                  </div>

                  {getStatusActions().length > 0 && (
                    <div className="flex flex-col gap-2">
                      {getStatusActions().map((action, index) => (
                        <Button
                          key={index}
                          variant={action.variant || "outline"}
                          onClick={action.onClick}
                          className="w-full"
                        >
                          {action.label}
                        </Button>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Status History</CardTitle>
              </CardHeader>
              <CardContent>
                <StatusHistoryTimeline history={statusHistory} />
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      <ScheduleInterviewDialog
        open={showScheduleDialog}
        onOpenChange={setShowScheduleDialog}
        candidateId={id!}
        onSuccess={fetchCandidateData}
      />

      <SendOfferDialog
        open={showOfferDialog}
        onOpenChange={setShowOfferDialog}
        candidateId={id!}
        onSuccess={fetchCandidateData}
      />

      <ShortlistDialog
        open={showShortlistDialog}
        onOpenChange={setShowShortlistDialog}
        candidateId={id!}
        onSuccess={fetchCandidateData}
      />
    </div>
  );
}
